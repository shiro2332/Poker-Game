Program Execution
(14 marks)
1.1. Correct program features and output (12m)
i. Get player names and display them in the game. (1m)								//Done
ii. Available Cards are evenly distributed among all players. (1m]					//Done, extra cards that cannot be distributed will be stored in deck
iii. Can shuffle all 52 cards at the beginning of each phase. (1m)					//Done
iv. The 5 cards at each player are sorted by suit then face. (1m)					//Done, suit is sorted with diamond first and spade last
v. Determine the highest point correctly based on suit. (1m)						//Done
vi. Identify the winner for each round. (1m)										//Done(In cmd)
vii. Track the score for all players. (1m)											//Done(in cmd)
viii. Played cards are removed from Available Cards for all players. (1m)			//Done, arraylist for current round of cards is removed after current score is fetched
ix. Complete playing 3 rounds in 3 Players phase. (1m)								//Done
x. Identify the 2 winners in 3 Players phase. (1m)									//Done, additional situation such as player won all round and draw is anticipated
xi. Complete playing 4 rounds in 2 Players phase. (1m)
xii. Identify the winner in 2 Players phase. (1m)	

1.2. User friendliness (2m)
2.0m – Input and output are clear without ambiguity.								//Should be no problem since using GUI
1.5m – One input or output are unclear with ambiguity.
1.0m – Many input or output are unclear with ambiguity.
0.5m – The program is unusable.

2. OOP Design andData Structures (4marks)
2.1. Association, Aggregation, and/or Composition (1m)
1.0m – Good design (sensible modeling with good identifier name)
0.5m – Poor design (insensible modeling or poor identifier name)
0.0m – Do not use

2.2. Inheritance (1m)
JavaFX, Swing, or Android is considered to have included inheritance.

1.0m – Good design (sensible modeling with good identifier name)					//JavaFX contain inheritance
0.5m – Poor design (insensible modeling or poor identifier name)
0.0m – Do not use

2.3. Implement Comparable or Comparator Interface to sort cards at players(1m)
1.0m – Sort by suit AND face correctly												//Done with 2 comparator, byFace and bySuit
0.5m – Sort by suit OR face only
0.0m – Do not implement

2.4. Use appropriate data structures (1m)
Use more other than array and array list.
0.5m – Use stack or queue															//Done at cardHandler, used pop to distribute cards from deck to player
0.5m – Use a set or map                                              				//Done at imageMap, used to fetch location of image using name of image

3. Bonus (2 marks) 2m – JavaFX/Swing/Android for the whole game.
For partial GUI,
0.5m – JavaFX/Swing/Android for getting player names.								//Done
0.5m – JavaFX/Swing/Android for displaying the 5 cards at the hand of each
player.
0.5m – JavaFX/Swing/Android for displaying the score of all players.

4. Presentation & Interview (2 marks)
2.0m – Very smooth and well prepared
1.5m – Overall fine with minor issues
1.0m – Average
0.5m – Poorly prepared or has major issues
